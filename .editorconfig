# EditorConfig is awesome: https://EditorConfig.org
root = true # top-most EditorConfig file

[*] # (Please don't specify an indent_size here; that has too many unintended consequences.)
indent_style = space # Don't use tabs for indentation.

[*.{cs,csx,vb,vbx}] # Code files
charset = utf-8-bom
indent_size = 4
insert_final_newline = true

[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}] # XML project files
indent_size = 2

[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}] # XML config files
indent_size = 2

[*.json] # JSON files
indent_size = 2

[*.ps1] # Powershell files
indent_size = 2

[*.sh] # Shell script files
end_of_line = lf
indent_size = 2

[*.{cs,vb}] # Dotnet code style settings:
dotnet_diagnostic.IDE0002.severity = warning # IDE0002: Simplify member access
dotnet_diagnostic.IDE0005.severity = warning # IDE0005: Remove unnecessary using directives
dotnet_diagnostic.IDE0035.severity = warning # IDE0035: Remove unreachable code
dotnet_diagnostic.IDE0036.severity = warning # IDE0036: Order modifiers
dotnet_diagnostic.IDE0043.severity = warning # IDE0043: Format string contains invalid placeholder
dotnet_diagnostic.IDE0044.severity = warning # IDE0044: Make field readonly
dotnet_diagnostic.IDE0051.severity = warning # IDE0051: Remove unused private member (Are IDE0051 and IDE0052 too noisy to be warnings for IDE editing scenarios? Should they be made build-only warnings?)
dotnet_diagnostic.IDE0055.severity = warning # IDE0055: Fix formatting
dotnet_diagnostic.IDE0073.severity = none # IDE0073: File header
dotnet_diagnostic.IDE0170.severity = warning # IDE0170: Prefer extended property pattern
dotnet_diagnostic.IDE2000.severity = warning # dotnet_style_allow_multiple_blank_lines_experimental
dotnet_diagnostic.RS2008.severity = none # error RS2008: Enable analyzer release tracking for the analyzer project containing rule '{0}'
dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion # Constants are PascalCase
dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style # Constants are PascalCase
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants # Constants are PascalCase
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion # Instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style # Instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields # Instance fields are camelCase and start with _
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = suggestion # Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style # Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions # Local functions are PascalCase
dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion # Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style # Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters # Locals and parameters are camelCase
dotnet_naming_rule.members_should_be_pascal_case.severity = suggestion # By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style # By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members # By default, name items with PascalCase
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = suggestion # Non-private readonly fields are PascalCase
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style = non_private_readonly_field_style # Non-private readonly fields are PascalCase
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols = non_private_readonly_fields # Non-private readonly fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = suggestion # Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style # Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields # Non-private static fields are PascalCase
dotnet_naming_rule.static_fields_should_be_camel_case.severity = suggestion # Static fields are camelCase and start with s_
dotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style # Static fields are camelCase and start with s_
dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields # Static fields are camelCase and start with s_
dotnet_naming_style.camel_case_style.capitalization = camel_case
dotnet_naming_style.constant_style.capitalization = pascal_case
dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _
dotnet_naming_style.local_function_style.capitalization = pascal_case
dotnet_naming_style.non_private_readonly_field_style.capitalization = pascal_case
dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_style.static_field_style.capitalization = camel_case
dotnet_naming_style.static_field_style.required_prefix = s_
dotnet_naming_symbols.all_members.applicable_kinds = *
dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const
dotnet_naming_symbols.instance_fields.applicable_kinds = field
dotnet_naming_symbols.local_functions.applicable_kinds = local_function
dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static
dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static
dotnet_public_api_analyzer.require_api_files = true # RS0016: Only enable if API files are present
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true # Sort using and Import directives with System.* appearing first
dotnet_style_allow_multiple_blank_lines_experimental = false # Whitespace options
dotnet_style_coalesce_expression = true:suggestion # Suggest more modern language features when available
dotnet_style_collection_initializer = true:suggestion # Suggest more modern language features when available
dotnet_style_explicit_tuple_names = true:suggestion # Suggest more modern language features when available
dotnet_style_null_propagation = true:suggestion # Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion # Suggest more modern language features when available
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion # Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_member_access = true:suggestion # Use language keywords instead of framework type names for type references
dotnet_style_qualification_for_event = false:refactoring # Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:refactoring # Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_method = false:refactoring # Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_property = false:refactoring # Avoid "this." and "Me." if not necessary
file_header_template = ""

[*.cs] # C# code style settings:
csharp_indent_block_contents = true # Indentation preferences
csharp_indent_braces = false # Indentation preferences
csharp_indent_case_contents = true # Indentation preferences
csharp_indent_case_contents_when_block = true # Indentation preferences
csharp_indent_labels = flush_left # Indentation preferences
csharp_indent_switch_labels = true # Indentation preferences
csharp_new_line_before_catch = true # Newline settings
csharp_new_line_before_else = true # Newline settings
csharp_new_line_before_finally = true # Newline settings
csharp_new_line_before_members_in_anonymous_types = true # Newline settings
csharp_new_line_before_members_in_object_initializers = true # Newline settings
csharp_new_line_before_open_brace = all # Newline settings
csharp_new_line_between_query_expression_clauses = true # Newline settings
csharp_prefer_braces = true:silent # Blocks are allowed
csharp_preserve_single_line_blocks = true # Blocks are allowed
csharp_preserve_single_line_statements = true # Blocks are allowed
csharp_space_after_cast = false # Space preferences
csharp_space_after_colon_in_inheritance_clause = true # Space preferences
csharp_space_after_comma = true # Space preferences
csharp_space_after_dot = false # Space preferences
csharp_space_after_keywords_in_control_flow_statements = true # Space preferences
csharp_space_after_semicolon_in_for_statement = true # Space preferences
csharp_space_around_binary_operators = before_and_after # Space preferences
csharp_space_around_declaration_statements = do_not_ignore # Space preferences
csharp_space_before_colon_in_inheritance_clause = true # Space preferences
csharp_space_before_comma = false # Space preferences
csharp_space_before_dot = false # Space preferences
csharp_space_before_open_square_brackets = false # Space preferences
csharp_space_before_semicolon_in_for_statement = false # Space preferences
csharp_space_between_empty_square_brackets = false # Space preferences
csharp_space_between_method_call_empty_parameter_list_parentheses = false # Space preferences
csharp_space_between_method_call_name_and_opening_parenthesis = false # Space preferences
csharp_space_between_method_call_parameter_list_parentheses = false # Space preferences
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false # Space preferences
csharp_space_between_method_declaration_name_and_open_parenthesis = false # Space preferences
csharp_space_between_method_declaration_parameter_list_parentheses = false # Space preferences
csharp_space_between_parentheses = false # Space preferences
csharp_space_between_square_brackets = false # Space preferences
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false # Whitespace options
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = false # Whitespace options
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = false # Whitespace options
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false # Whitespace options
csharp_style_allow_embedded_statements_on_same_line_experimental = false # Whitespace options
csharp_style_conditional_delegate_call = true:suggestion # Suggest more modern language features when available
csharp_style_expression_bodied_accessors = true:none # Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_constructors = false:none # Prefer method-like constructs to have a block body
csharp_style_expression_bodied_indexers = true:none # Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_methods = false:none # Prefer method-like constructs to have a block body
csharp_style_expression_bodied_operators = false:none # Prefer method-like constructs to have a block body
csharp_style_expression_bodied_properties = true:none # Prefer property-like constructs to have an expression-body
csharp_style_inlined_variable_declaration = true:suggestion # Suggest more modern language features when available
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion # Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion # Suggest more modern language features when available
csharp_style_prefer_extended_property_pattern = true:suggestion # Suggest more modern language features when available
csharp_style_throw_expression = true:suggestion # Suggest more modern language features when available
csharp_style_var_elsewhere = false # Preference regarding "var" everywhere
csharp_style_var_for_built_in_types = false # Preference regarding "var" everywhere
csharp_style_var_when_type_is_apparent = false # Preference regarding "var" everywhere
dotnet_diagnostic.IDE0060.severity = warning # IDE0060: Remove unused parameter

[src/{Compilers,ExpressionEvaluator,Scripting}/**Test**/*.{cs,vb}]
dotnet_diagnostic.IDE0060.severity = none # IDE0060: Remove unused parameter

[src/{Analyzers,CodeStyle,Features,Workspaces,EditorFeatures,VisualStudio}/**/*.{cs,vb}]
csharp_prefer_braces = when_multiline:warning # IDE0011: Add braces
csharp_style_var_elsewhere = true:warning # Prefer "var" everywhere
csharp_style_var_for_built_in_types = true:warning # Prefer "var" everywhere
csharp_style_var_when_type_is_apparent = true:warning # Prefer "var" everywhere
dotnet_diagnostic.CA1012.severity = warning # CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1822.severity = warning # CA1822: Make member static
dotnet_diagnostic.IDE0007.severity = warning # Prefer "var" everywhere
dotnet_diagnostic.IDE0011.severity = warning # NOTE: We need this severity entry for Add Braces due to https://github.com/dotnet/roslyn/issues/44201
dotnet_diagnostic.IDE0040.severity = warning # IDE0040: Add accessibility modifiers
dotnet_diagnostic.IDE0052.severity = warning # IDE0052: Remove unread private member
dotnet_diagnostic.IDE0059.severity = warning # IDE0059: Unnecessary assignment to a value
dotnet_diagnostic.IDE2001.severity = warning # csharp_style_allow_embedded_statements_on_same_line_experimental
dotnet_diagnostic.IDE2002.severity = warning # csharp_style_allow_blank_lines_between_consecutive_braces_experimental
dotnet_diagnostic.IDE2003.severity = warning # dotnet_style_allow_statement_immediately_after_block_experimental
dotnet_diagnostic.IDE2004.severity = warning # csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental
dotnet_diagnostic.IDE2005.severity = warning # csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental
dotnet_diagnostic.IDE2006.severity = warning # csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental

[src/{VisualStudio}/**/*.{cs,vb}]
dotnet_code_quality.CA1822.api_surface = private # CA1822: Make member static # There is a risk of accidentally breaking an internal API that partners rely on though IVT.